:root {
  --space-small: 5%;
  --space-medium: 10%;
  --space-large: 18%;
  --gap-small: 1rem;
  --gap-medium: 2rem;
  --gap-large: 4rem;
  --gap-huge: 8rem;
  --white: #fff;
  --silk: #f5f5f5;
  --silk-shade: #f5f5f580;
  --charcol: #424c4c;
  --charcol-shade: #424c4c85;
  --black: #1c1c1c;
  --icon: 5rem;
  --border-radius: 10px;
  --time: .2s;
  --time-long: 6s;
}

$border-radius: 10px;
$border-radius-large: 20px;

$breakpoints: ('mobile': (min-width: 478),
  'landscape': (min-width: 768px),
  'tablet': (min-width: 992px),
  'desktop': (min-width: 1200px),
  'ultrawide': (min-width: 2000px)) !default;

@mixin dynamic-border-radius($value, $breakpoint) {
  & {
    border-radius: #{"max(0px, min(#{$value}, 100% - #{$breakpoint} + 1px) * 9999) / #{$value}"};
  }
}

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  @else {
    @warn 'Unfortunately, no value could be retrieved.';
  }
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 var(--charcol-shade);
  }
}

.container {
  width: 100%;
  
  @include respond-to('tablet') {
    max-width: 600px;
  }

  @include respond-to('landscape') {
    max-width: 750px;
  }

  @include respond-to('desktop') {
    max-width: 950px;
  }
}

.section {
  padding: var(--space-small) 0;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow-x: hidden;

  &:nth-of-type(1) {
    padding: 200px 0;
  }
}

.center {
  text-align: center;
}

.tag {
  font-size: 16px;
  background: var(--button-color);
  padding: var(--gap-small) var(--gap-medium);
}

.outlined {
  border: 2px solid var(--charcol-shade);
  transition: border var(--time) ease;

  &:hover {
    border: 2px solid #ffffff00;
  }
}

.rounded {
	border-radius: var(--border-radius);

  &__large {
    border-radius: calc(var(--border-radius) * 2);
  }
}

.acrylic {
  background-blend-mode: exclusion;
	-webkit-backdrop-filter: blur(24px);
	backdrop-filter: blur(24px);
}

.full-frame {
  object-fit: cover;
	width: 100%;
	height: 100%;
  transition: transform var(--time);
  transform: scale(1.0);

  &__hover {
    @include respond-to('landscape') {	
      &:hover {
        transform: scale(1.05);
      }
    }
  }
}

.button {
  display: block;
  background: var(--white);
  transition: background var(--time), box-shadow var(--time);
}

.hover-pulse {
  &:hover, &:focus {
    animation: pulse .5s;
    box-shadow: 0 0 0 36px transparent;
  }
}

.hover-fill {
  position: relative;
  overflow: hidden;
  
  --hover-x: 50%;
  --hover-y: 50%;

  &::after {
    content: '';
    position: absolute;
    top: var(--hover-y);
    left: var(--hover-x);
    width: 0;
    height: 0;
    border-radius: 50%;
    background-color: var(--highlight-color);
    transition: width var(--time) ease-in-out, height var(--time) ease-in-out;
    transform: translate(-50%, -50%);
    z-index: -1;
  }

  &:hover::after {
    width: 300%;
    height: 300%;
  }

  &:active {
    background-color: var(--highlight-color);
  }
}

.faded {
	opacity: .7;
}

.hover-shadow {
  transition: all var(--time);

  &::after {
    content: ' ';
    width: 100%;
    height: 100%;
    opacity: 0;
    box-shadow: 0 5px 15px var(--accent-color);
    transition: opacity var(--time) ease;
  }

  &:hover::after {
    opacity: 1;
  }
}

.hover-line {
  text-decoration: none;
  box-shadow: inset 0 -1px 0 0 var(--highlight-color);
  display: inline-block;
  transition: all .2s ease-in-out;
  padding: 0 3px;
  box-sizing: border-box;

  &:hover {
    border: none;
    box-shadow: inset 0 -24px 0 0 var(--highlight-color);
  }
}

