@use "../base/variables" as *;
@use "../functions/breakpoints" as breakpoint;

.oscillator-section {
	display: flex;
	width: 100%;
	flex-direction: row;
	gap: $gap-medium;
	align-items: stretch;
}

.oscillators {
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: space-around;
	width: 300px;
	min-height: 200px;
	gap: $gap-small;
	background: var(--oscillator-color);
	box-shadow: var(--oscillator-shadow);
	border: var(--oscillator-border);
	border-radius: $border-radius-large;
	padding: $gap-large $gap-medium $gap-medium $gap-medium;

	// Common knob groups styling for both oscillators
	.knob-groups {
		display: flex;
		flex-direction: row;
		gap: $gap-tiny;
		justify-content: center;
		align-items: flex-start;
		flex-wrap: nowrap;

		.knob-controller {
			flex-shrink: 0;
		}
	}

	// Specific targeting for OSC 2 to ensure horizontal layout
	&.oscillators--dual .knob-groups {
		display: flex !important;
		flex-direction: row !important;
		
		.knob-controller {
			display: inline-flex !important;
			flex-direction: column !important;
		}
	}

	&__text {
		position: absolute;
		top: 0;
		left: 50%;
		margin-top: $gap-medium;
		transform: translateX(-50%);
		width: 100%;
		color: var(--text-color);
		filter: drop-shadow(0 0 4px rgba(0, 255, 136, 0.7));
		font-size: 12px;
		font-weight: 600;
		letter-spacing: 2px;
		text-transform: uppercase;
		text-align: center;
		pointer-events: none;
	}

	.waveforms {
		display: flex;
		gap: 8px;
		background: var(--waveforms-color);
		box-shadow: var(--waveforms-shadow);
		border: var(--waveforms-border);
		padding: 8px;
		border-radius: 6px;

		&__button {
			background: var(--waveform-button-color);
			width: 35px;
			height: 35px;
			border: var(--waveform-button-border);
			border-radius: 3px;
			color: $silk;
			font-size: 10px;
			font-weight: 700;
			padding: 6px 2px;
			cursor: pointer;
			transition: all 0.2s ease;
			text-transform: uppercase;
			box-shadow: var(--waveform-button-shadow);

			svg {
				pointer-events: none;
				width: 100%;
				height: 100%;
			}

			&:hover {
				background: var(--waveform-button-hover-color);
				color: var(--highlight-color);
				border-color: var(--waveform-button-hover-border);
				box-shadow: var(--waveform-button-hover-shadow);
			}

			&.selected {
				background: var(--waveform-button-selected-color);
				color: #000;
				border-color: var(--waveform-button-selected-border);
				box-shadow: var(--waveform-button-selected-shadow);

				svg {
					filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.5));
				}
			}
		}
	}

	.knob-controller {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 8px;
		min-width: 80px;
	}

	.knob-label {
		color: var(--knob-label-color);
		font-size: 8px;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		width: 60px;
		text-align: center;
	}

	.knob-container {
		position: relative;
		width: 80px;
		height: 80px;

		@include breakpoint.respond-to("tablet") {
			width: 70px;
			height: 70px;
		}

		@include breakpoint.respond-to("mobile") {
			width: 60px;
			height: 60px;
		}
	}

	// Transform range inputs to look like knobs
	input[type="range"] {
		position: absolute;
		width: 100%;
		height: 100%;
		opacity: 0;
		cursor: pointer;
		z-index: 10;

		// Create knob appearance
		&::before {
			content: "";
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			width: 70px;
			height: 70px;
			background: radial-gradient(circle at 30% 30%, #666, #333, #111);
			border-radius: 50%;
			border: 3px solid #444;
			box-shadow:
				0 8px 16px rgba(0, 0, 0, 0.6),
				inset 0 2px 4px rgba(255, 255, 255, 0.1),
				inset 0 -2px 4px rgba(0, 0, 0, 0.3);
			pointer-events: none;

			@include breakpoint.respond-to("tablet") {
				width: 60px;
				height: 60px;
			}

			@include breakpoint.respond-to("mobile") {
				width: 50px;
				height: 50px;
			}
		}

		// Knob indicator line
		&::after {
			content: "";
			position: absolute;
			top: 15px;
			left: 50%;
			transform: translateX(-50%);
			width: 3px;
			height: 20px;
			background: #00ff88;
			border-radius: 2px;
			box-shadow: 0 0 4px #00ff88;
			pointer-events: none;

			@include breakpoint.respond-to("tablet") {
				top: 12px;
				height: 18px;
				width: 2px;
			}

			@include breakpoint.respond-to("mobile") {
				top: 10px;
				height: 15px;
				width: 2px;
			}
		}
	}



	// LED-style value displays
	.volume-display, .detune-display {
		background: var(--led-display-color);
		color: var(--led-display-text-color);
		font-size: 10px;
		font-weight: 700;
		text-align: center;
		padding: 4px 6px;
		border-radius: 4px;
		border: var(--led-display-border);
		box-shadow: var(--led-display-shadow);
		text-shadow: var(--led-display-text-shadow);
		width: 45px;
		height: 18px;
		display: flex;
		align-items: center;
		justify-content: center;
	}
}

.knob {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	width: 50px;
	height: 50px;
	background: var(--knob-color);
	border: var(--knob-border);
	box-shadow: var(--knob-shadow);
	border-radius: 50%;

	.knob-indicator {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		transition: transform 0.1s ease;

		// Knob indicator line
		&::before {
			content: "";
			position: absolute;
			top: 5px;
			left: 50%;
			transform: translateX(-50%);
			width: 3px;
			height: 20px;
			background: var(--knob-indicator-color);
			border-radius: 2px;
			box-shadow: var(--knob-indicator-shadow);
		}
	}

	// Center dot (static)
	&::after {
		content: "";
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 12px;
		height: 12px;
		background: var(--knob-center-color);
		border-radius: 50%;
		border: var(--knob-center-border);
	}
}
